name: Run Check-Only Tests

on:
  workflow_dispatch:
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - master

permissions:
  contents: write

jobs:
  job-validate-prod-deployment:
    name:  "Validate Deployment"
    runs-on: ubuntu-latest
    outputs:
      validation-result: ${{ steps.validate-deployment.outputs.result }}
    steps:

      - name: "Install SF CLI"
        run: npm install @salesforce/cli --global
      
      - name: "Install SFDX Git Delta Plugin"
        run: echo y | sf plugins install sfdx-git-delta

      - name: "Checkout source code"
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: "Populate Server Key"
        run: echo "${{ secrets.SALESFORCE_JWT_SECRET_KEY }}" > server.key
      
      - name: "Authorise into Salesforce"
        run: sf org login jwt --client-id ${{ secrets.SALESFORCE_CONSUMER_KEY }} --jwt-key-file server.key --username ${{ secrets.SALESFORCE_DEVHUB_USERNAME }} --set-default-dev-hub
        
      - name: "Write Deployment Package"
        run: sf sgd source delta --from "origin/${{ github.base_ref }}" --to "origin/${{ github.head_ref }}" --output . --source force-app/main/default

      - name: "Upload package.xml to artifacts"
        uses: actions/upload-artifact@v3
        with:
          name: "Deployment Package"
          path: package/package.xml
      
      - name: "Validate Deployment to DiegOrg"
        id: validate-deployment
        continue-on-error: true
        shell: bash
        run: exit 1
#          cat ./package/package.xml
#          if grep -q '<types>' package/package.xml;
#          then
#            sf project deploy validate --target-org ${{ secrets.SALESFORCE_DEVHUB_USERNAME }} --manifest package/package.xml --test-level RunLocalTests --verbose --wait 180 --json >> "$GITHUB.OUTPUT"
 #         fi
      - name: "Retrieve failed step details"
        shell: bash
        id: validate-fail-retrieval
        if: ${{ always() && steps.validate-deployment.conclusion == 'failure '}}
        run:  echo "failure step completed"  #echo "${{ steps.validate-deployment.outputs }}"